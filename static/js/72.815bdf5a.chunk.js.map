{"version":3,"file":"static/js/72.815bdf5a.chunk.js","mappings":"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","sources":["pages/MovieDetails/MovieCard.styled.js","pages/MovieDetails/MovieCard.jsx","pages/MovieDetails/MovieDetails.styled.js","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MovieWrapper = styled.div`\n  max-width: 100%;\n  display: flex;\n  align-items: flex-start;\n  margin: 0 auto;\n  font-size: 20px;\n  line-height: 14px;\n  margin: 28px 0;\n`;\n\nexport const Poster = styled.img`\n  width: 375px;\n  margin-right: 40px;\n  border-radius: 4px;\n`;\n\nexport const Title = styled.h2`\n  font-weight: 700;\n  font-size: 36px;\n  line-height: 1.5;\n  text-transform: uppercase;\n  margin-bottom: 28px;\n`;\n\nexport const FlexContainer = styled.div`\n  display: flex;\n  align-items: baseline;\n  margin-bottom: 24px;\n`;\n\nexport const MovieInfo = styled.p`\n  font-size: 24px;\n  line-height: 16px;\n  color: #8c8c8c;\n\n  width: 160px;\n  margin-right: 40px;\n`;\n\nexport const VoteWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nexport const VoteAverage = styled.span`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  color: #ffffff;\n  border-radius: 5px;\n  width: 44px;\n  height: 28px;\n  background-color: rgb(81, 124, 232);\n`;\n\nexport const VoteCount = styled.span`\n  margin: 0 4px;\n  line-height: 16px;\n  color: #8c8c8c;\n`;\n\nexport const About = styled.h3`\n  font-weight: 500;\n  font-size: 32px;\n  line-height: 1.5;\n  text-transform: uppercase;\n  margin-bottom: 12px;\n`;\n\nexport const AboutText = styled.p`\n  margin: 8px 0 20px;\n  font-size: 28px;\n  line-height: 1.17;\n`;\n","import PropTypes from 'prop-types';\nimport noPoster from '../../images/no-poster.jpg';\nimport {\n  MovieWrapper,\n  Poster,\n  Title,\n  VoteAverage,\n  VoteCount,\n  MovieInfo,\n  VoteWrapper,\n  About,\n  AboutText,\n  FlexContainer,\n} from './MovieCard.styled';\n\nexport const MovieCard = ({\n  movie: {\n    title,\n    popularity,\n    poster_path,\n    genres,\n    original_title,\n    vote_average,\n    vote_count,\n    overview,\n  },\n}) => {\n  const onPoster = poster_path => {\n    const poster = poster_path\n      ? `https://image.tmdb.org/t/p/w500${poster_path}`\n      : noPoster;\n    return poster;\n  };\n  return (\n    <MovieWrapper>\n      <Poster src={onPoster(poster_path)} alt={title} />\n      <div>\n        <Title>{title}</Title>\n        <FlexContainer>\n          <MovieInfo>Vote / Votes</MovieInfo>\n          <VoteWrapper>\n            <VoteAverage>{vote_average.toFixed(1)}</VoteAverage>\n            <VoteCount>/ {vote_count}</VoteCount>\n          </VoteWrapper>\n        </FlexContainer>\n        <FlexContainer>\n          <MovieInfo>Popularity</MovieInfo>\n          <p>{popularity.toFixed(1)}</p>\n        </FlexContainer>\n        <FlexContainer>\n          <MovieInfo>Original Title</MovieInfo>\n          <p>{original_title}</p>\n        </FlexContainer>\n        <FlexContainer>\n          <MovieInfo>Genre</MovieInfo>\n          <p>{genres.map(genre => genre.name).join(', ')}</p>\n        </FlexContainer>\n        <About>About</About>\n        <AboutText>{overview}</AboutText>\n      </div>\n    </MovieWrapper>\n  );\n};\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    popularity: PropTypes.number,\n    poster_path: PropTypes.string,\n    genres: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n      })\n    ),\n    original_title: PropTypes.string,\n    vote_average: PropTypes.number,\n    vote_count: PropTypes.number,\n    overview: PropTypes.string,\n  }).isRequired,\n};\n","import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { BsArrowLeft } from 'react-icons/bs';\n\nexport const AdditionalInfo = styled.h3`\n  text-align: center;\n  font-weight: 500;\n  font-size: 32px;\n  line-height: 1.5;\n  text-transform: uppercase;\n  margin-bottom: 28px;\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n  gap: 20px;\n  margin-bottom: 40px;\n`;\n\nexport const NavItem = styled(NavLink)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 0 10px;\n  text-decoration: none;\n  font-family: inherit;\n  font-weight: 500;\n  font-size: 20px;\n  line-height: 1.17;\n  text-transform: uppercase;\n  color: #212121;\n\n  border: none;\n  border-radius: 5px;\n  width: 160px;\n  height: 44px;\n  background-color: rgb(112, 128, 144);\n  box-shadow: 0px 9px 8px 0px rgba(34, 60, 80, 0.2);\n  transition-property: background-color, color, border, fill;\n  transition-duration: 250ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n\n  cursor: pointer;\n\n  svg: {\n    fill: #212121;\n  }\n\n  &.active {\n    background-color: rgb(81, 124, 232);\n    color: #ffffff;\n    border: transparent;\n    fill: #ffffff;\n  }\n  :hover:not(.active) {\n    background-color: rgb(81, 124, 232);\n    color: #ffffff;\n    border: transparent;\n    fill: #ffffff;\n  }\n`;\n\nexport const Icon = styled(BsArrowLeft)`\n  margin-right: 12px;\n`;\n","import toast from 'react-hot-toast';\nimport { useState, useEffect, Suspense } from 'react';\nimport { Outlet, useLocation, useParams } from 'react-router-dom';\nimport { fetchMovieDetails } from 'services/Api';\nimport { MovieCard } from './MovieCard';\nimport { AdditionalInfo, Icon, NavItem, Wrapper } from './MovieDetails.styled';\nimport { Loader } from 'components/Loader/Loader';\n// import { AiOutlineArrowLeft } from 'react-icons/ai';\n\nconst links = [\n  { href: 'cast', text: 'Cast' },\n  { href: 'reviews', text: 'Reviews' },\n];\n\nconst MovieDetails = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [movie, setMovie] = useState(null);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n\n  useEffect(() => {\n    async function getMovieDetails() {\n      try {\n        setIsLoading(true);\n        const fetchedMovieDetails = await fetchMovieDetails(movieId);\n        setMovie(fetchedMovieDetails);\n      } catch (error) {\n        toast.error('Sorry, we could not find info about this movie');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getMovieDetails();\n  }, [movieId]);\n\n  if (!movie) return null;\n\n  return (\n    <main>\n      {isLoading && <Loader />}\n      <NavItem to={backLinkHref}>\n        <Icon />\n        Go back\n      </NavItem>\n      <MovieCard movie={movie} />\n      <AdditionalInfo>Additional information</AdditionalInfo>\n      <Wrapper>\n        {links.map(({ href, text }) => (\n          <NavItem key={href} to={href}>\n            {text}\n          </NavItem>\n        ))}\n      </Wrapper>\n      <Suspense fallback={null}>\n        <Outlet />\n      </Suspense>\n    </main>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["MovieWrapper","styled","Poster","Title","FlexContainer","MovieInfo","VoteWrapper","VoteAverage","VoteCount","About","AboutText","MovieCard","movie","title","popularity","poster_path","genres","original_title","vote_average","vote_count","overview","src","noPoster","onPoster","alt","toFixed","map","genre","name","join","AdditionalInfo","Wrapper","NavItem","NavLink","Icon","BsArrowLeft","links","href","text","useState","isLoading","setIsLoading","setMovie","movieId","useParams","backLinkHref","useLocation","state","from","useEffect","fetchMovieDetails","fetchedMovieDetails","toast","getMovieDetails","Loader","to","Suspense","fallback"],"sourceRoot":""}