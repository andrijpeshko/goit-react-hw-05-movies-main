{"version":3,"file":"static/js/387.83fc9f92.chunk.js","mappings":"4SAEaA,EAAWC,EAAAA,GAAAA,GAAH,qJASRC,EAAQD,EAAAA,GAAAA,IAAH,wGAOLE,EAAQF,EAAAA,GAAAA,GAAH,qK,GAUOA,EAAAA,GAAAA,EAAH,iE,QCqBtB,EA1Ca,WACX,IAAQG,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KAcA,OAZAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAE8BC,EAAAA,EAAAA,IAAeN,GAF7C,OAEUO,EAFV,OAGIH,EAAQG,GAHZ,gDAKIC,EAAAA,GAAAA,MAAY,kDALhB,0DADc,uBAAC,WAAD,wBASdC,EACD,GAAE,CAACT,IAECG,EAIEA,EAAKO,OAAS,GACnB,SAACd,EAAD,UACGO,EAAKQ,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,aAAcC,EAAlC,EAAkCA,GAAlC,OACR,UAAChB,EAAD,YACE,SAACD,EAAD,CACEkB,IACEF,EAAY,yCAC0BA,GAClCG,EAENC,IAAKN,KAEP,uBAAIA,KACJ,uBAAIC,MAVME,EADJ,OAgBZ,mEArBO,IAuBV,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 40px;\n  justify-content: center;\n  align-items: center;\n  list-style: none;\n`;\n\nexport const Photo = styled.img`\n  width: 160px;\n  height: 200px;\n  object-fit: cover;\n  border-radius: 4px;\n`;\n\nexport const Actor = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  width: 160px;\n  height: 340px;\n  gap: 10px;\n`;\n\nexport const ActorInfo = styled.p`\n  font-weight: 500;\n  font-size: 12px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-hot-toast';\nimport { fetchMovieCast } from 'services/Api';\nimport photo from '../../images/no-photo.jpeg';\nimport { Photo, CastList, Actor } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n\n  useEffect(() => {\n    async function getCast() {\n      try {\n        const fetchedCast = await fetchMovieCast(movieId);\n        setCast(fetchedCast);\n      } catch (error) {\n        toast.error('Sorry, we could not find info about this movie');\n      }\n    }\n    getCast();\n  }, [movieId]);\n\n  if (!cast) {\n    return null;\n  }\n\n  return cast.length > 0 ? (\n    <CastList>\n      {cast.map(({ name, character, profile_path, id }) => (\n        <Actor key={id}>\n          <Photo\n            src={\n              profile_path\n                ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                : photo\n            }\n            alt={name}\n          />\n          <p>{name}</p>\n          <p>{character}</p>\n        </Actor>\n      ))}\n    </CastList>\n  ) : (\n    <p>We dont have any reviews for this movie</p>\n  );\n};\n\nexport default Cast;\n"],"names":["CastList","styled","Photo","Actor","movieId","useParams","useState","cast","setCast","useEffect","fetchMovieCast","fetchedCast","toast","getCast","length","map","name","character","profile_path","id","src","photo","alt"],"sourceRoot":""}